syntax = "proto3";

package user;

service UserService {
    rpc GetUserInfo(GetUserRequest) returns (GetUserResponse);
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);
    rpc SearchUser(SearchUserRequest) returns (SearchUserResponse);
    rpc CheckUserIdAvailability(CheckUserIdAvailabilityRequest) returns (CheckUserIdAvailabilityResponse);
    rpc CheckTokenIsValid(CheckTokenIsValidRequest) returns (CheckTokenIsValidResponse);
}

message GetUserRequest {
    string user_id = 1;
}

message GetUserResponse {
    string user_id = 1;
    string name = 2;
    string email = 3;
    optional string image = 4;
    optional string description = 5;
}

message CreateUserRequest {
    string name = 1;
    string email = 2;
    string image = 3;
    string password = 4;
}

message CreateUserResponse {
    string user_id = 1;
}

message UpdateUserRequest {
    string user_id = 1;
    optional string name = 2;
    optional string email = 3;
    optional string image = 4;
    optional string password = 5;
    optional string description = 6;
}

message UpdateUserResponse {
    int32 updated_count = 1;
}

message DeleteUserRequest {
    string user_id = 1;
}

message DeleteUserResponse {
    int32 deleted_count = 1;
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string user_id = 1;
}

message LogoutRequest {
    string token = 1;
}

message LogoutResponse {
    string timestamp = 1;
}

message SearchUserRequest {
    string query = 1;
}

message SearchUserResponse {
    repeated GetUserResponse users = 1;
}

message CheckUserIdAvailabilityRequest {
    string user_id = 1;
}

message CheckUserIdAvailabilityResponse {
    bool available = 1;
}

message CheckTokenIsValidRequest {
    string token = 1;
}

message CheckTokenIsValidResponse {
    bool valid = 1;
}